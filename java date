package idv.javase.api.time;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;

/**
 * ==== Java 8 The Date-Time Packages ====
 * There are two basic ways to represent time.
 * One way represents time in human terms, referred to as human time, such as year, month, day, hour, minute and second.
 * The other way, machine time, measures time continuously along a timeline from an origin, called the epoch, in nanosecond resolution.
 *
 *
 * java.time
 *   The core of the API for representing date and time.
 *   It includes classes for date, time, date and time combined, time zones, instants, duration, and clocks.
 *   These classes are based on the calendar system defined in ISO-8601, and are immutable and thread-safe.
 *
 *   ---------------------------------------------------------------------------------------------
 *   Class or Enum  Year  Month  Day  Hours  Minutes  Seconds*  ZoneOffset  ZoneID  toStringOutput
 *   ---------------------------------------------------------------------------------------------
 *   Instant                                          V                             2013-08-20T15:16:26.355Z
 *   LocalDate      V     V      V                                                  2013-08-20
 *   LocalDateTime  V     V      V    V      V        V                             2013-08-20T08:16:26.937
 *   ZonedDateTime  V     V      V    V      V        V         V           V       2013-08-21T00:16:26.941+09:00[Asia/Tokyo]
 *   LocalTime                        V      V        V                             08:16:26.943
 *   MonthDay             V      V                                                  --08-20
 *   Year           V                                                               2013
 *   YearMonth      V     V                                                         2013-08
 *   Month                V                                                         AUGUST
 *   OffsetDateTime V     V      V    V      V        V         V                   2013-08-20T08:16:26.954-07:00
 *   OffsetTime                       V      V        V         V                   08:16:26.957-07:00
 *   Duration                                         V                             PT20H (20 hours)
 *   Period         V     V      V                                                  P10D (10 days)
 *
 *   == Summary ==
 *   The "Instant" class provides a machine view of the timeline.
 *   The "LocalDate", "LocalTime", and "LocalDateTime" classes provide a human view of date and time without any reference to time zone.
 *   The "ZoneId", "ZoneRules", and "ZoneOffset" classes describe time zones, time zone offsets, and time zone rules.
 *   The "ZonedDateTime" class represents date and time with a time zone. The OffsetDateTime and OffsetTime classes represent date and time, or time, respectively. These classes take a time zone offset into account.
 *   The "Duration" class measures an amount of time in seconds and nanoseconds.
 *   The "Period" class measures an amount of time using years, months, and days.
 *
 * java.time.chrono
 * java.time.format
 * java.time.temporal
 * java.time.zone
 *
 * ==== Method Naming Conventions ====
 * Prefix    Method Type      Use
 * -----------------------------------------------------------------------------
 * of        static factory	  Creates an instance where the factory is primarily validating the input parameters, not converting them.
 * from      static factory	  Converts the input parameters to an instance of the target class, which may involve losing information from the input.
 * parse     static factory   Parses the input string to produce an instance of the target class.
 * format    instance         Uses the specified formatter to format the values in the temporal object to produce a string.
 * get       instance         Returns a part of the state of the target object.
 * is        instance         Queries the state of the target object.
 * with      instance         Returns a copy of the target object with one element changed; this is the immutable equivalent to a set method on a JavaBean.
 * plus      instance         Returns a copy of the target object with an amount of time added.
 * minus     instance         Returns a copy of the target object with an amount of time subtracted.
 * to        instance         Converts this object to another type.
 * at        instance         Combines this object with another.
 *
 * ==== Summary ====
 *
 */
public class Java8DateTime {

    private static DateTimeFormatter DATE_FORMAT = DateTimeFormatter.ofPattern("yyyy/MM/dd");
    private static DateTimeFormatter DATETIME_FORMAT = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss");

    private void procDate() {
        System.out.println("==== procDate ====");
        LocalDate now = LocalDate.now();
        System.out.println("now = " + now);
        LocalDate date = LocalDate.parse("2019/01/31", DATE_FORMAT);
        System.out.println("date = " + date);
    }

    private void procDateTime() {
        System.out.println("==== procDateTime ====");
        LocalDateTime now = LocalDateTime.now();
        System.out.println("now = " + now);
        LocalDateTime datetime = LocalDateTime.parse("2019/01/31 20:00:00", DATETIME_FORMAT);
        System.out.println("datetime = " + datetime);
    }

    private void procPeriod() {
        System.out.println("==== procPeriod ====");
        LocalDate dateFrom = LocalDate.parse("2019/01/31", DATE_FORMAT);
        LocalDate dateTo = LocalDate.parse("2019/02/28", DATE_FORMAT);
        System.out.println("date period YEARS = " + ChronoUnit.YEARS.between(dateFrom, dateTo));
        System.out.println("date period MONTHS = " + ChronoUnit.MONTHS.between(dateFrom, dateTo));
        System.out.println("date period DAYS = " + ChronoUnit.DAYS.between(dateFrom, dateTo));
        /* java.time.temporal.UnsupportedTemporalTypeException: Unsupported unit: Minutes */
//        System.out.println("date period HALF_DAYS = " + ChronoUnit.HALF_DAYS.between(dateFrom, dateTo));
//        System.out.println("date period HOURS = " + ChronoUnit.HOURS.between(dateFrom, dateTo));
//        System.out.println("date period MINUTES = " + ChronoUnit.MINUTES.between(dateFrom, dateTo));

        LocalDateTime datetimeFrom = LocalDateTime.parse("2019/01/31 09:00:00", DATETIME_FORMAT);
        LocalDateTime datetimeTo = LocalDateTime.parse("2019/02/28 18:00:00", DATETIME_FORMAT);
        System.out.println("datetime period YEARS = " + ChronoUnit.YEARS.between(datetimeFrom, datetimeTo));
        System.out.println("datetime period MONTHS = " + ChronoUnit.MONTHS.between(datetimeFrom, datetimeTo));
        System.out.println("datetime period DAYS = " + ChronoUnit.DAYS.between(datetimeFrom, datetimeTo));
        System.out.println("datetime period HALF_DAYS = " + ChronoUnit.HALF_DAYS.between(datetimeFrom, datetimeTo));
        System.out.println("datetime period HOURS = " + ChronoUnit.HOURS.between(datetimeFrom, datetimeTo));
        System.out.println("datetime period MINUTES = " + ChronoUnit.MINUTES.between(datetimeFrom, datetimeTo));
    }

    public static void main(String[] args) {
        Java8DateTime main = new Java8DateTime();
//        main.procDate();
//        main.procDateTime();
        main.procPeriod();
    }

}
