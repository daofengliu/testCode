package idv.orangec.util;

import java.io.File;
import java.io.IOException;

import org.apache.commons.io.FileUtils;
import org.apache.commons.lang3.RandomStringUtils;
import org.jasypt.util.binary.BasicBinaryEncryptor;
import org.jasypt.util.text.BasicTextEncryptor;

/**
 * @see - http://www.jasypt.org/ http://www.jasypt.org/api/jasypt/1.9.2/index.html
 *
 * <dependency>
 *     <groupId>org.jasypt</groupId>
 *     <artifactId>jasypt</artifactId>
 *     <version>1.9.2</version>
 * </dependency>
 */
public class EncryptUtil {

    private static final String PW_GENERATION_STR =
            "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
    private static final int PW_GENERATION_LENGTH = 20;

    /**
     * More security:
     *   the StrongTextEncryptor util class with a much more secure (but slower!) algorithm
     *   (you may need to download and install the Java Cryptography Extension (JCE)
     *     Unlimited Strength Jurisdiction Policy Files to use it)
     */
    private void encryptString() {
        String pw = randomPasswd();

        String str = "Hello Java";
        System.out.println("str = " + str);

        /*
         * Exception in thread "main" org.jasypt.exceptions.EncryptionOperationNotPossibleException:
         *   Encryption raised an exception.
         *   A possible cause is you are using strong encryption algorithms and you have not installed
         *     the Java Cryptography Extension (JCE) Unlimited Strength Jurisdiction Policy Files in this Java Virtual Machine
         */
//        StrongTextEncryptor encryptor = new StrongTextEncryptor();
        BasicTextEncryptor encryptor = new BasicTextEncryptor();
        encryptor.setPassword(pw);
        String str2 = encryptor.encrypt(str);
        System.out.println("str2 = " + str2);

        String str3 = encryptor.decrypt(str2);
        System.out.println("str3 = " + str3);

        /*
         * Exception in thread "main" org.jasypt.exceptions.EncryptionOperationNotPossibleException
         */
//        BasicTextEncryptor encryptor2 = new BasicTextEncryptor();
//        encryptor2.setPassword("1234567");
//        String str4 = encryptor2.decrypt(str2);
//        System.out.println("str4 = " + str4);
    }

    /**
     * More security:
     *   the StrongBinaryEncryptor util class with a much more secure (but slower!) algorithm
     *   (you may need to download and install the Java Cryptography Extension (JCE)
     *     Unlimited Strength Jurisdiction Policy Files to use it)
     */
    private void encryptFile() throws IOException {
        String pw = randomPasswd();

        /*
         * Exception in thread "main"
         * org.jasypt.exceptions.EncryptionOperationNotPossibleException:
         *   Encryption raised an exception.
         *   A possible cause is you are using strong encryption algorithms and you have not installed
         *     the Java Cryptography Extension (JCE) Unlimited Strength Jurisdiction Policy Files in this Java Virtual Machine
         */
        // StrongBinaryEncryptor encryptor = new StrongBinaryEncryptor();
        BasicBinaryEncryptor encryptor = new BasicBinaryEncryptor();
        encryptor.setPassword(pw);

        /* encryption */
        byte[] encrypts = encryptor.encrypt(FileUtils.readFileToByteArray(new File("D:/test.txt")));
        FileUtils.writeByteArrayToFile(new File("D:/test2.txt"), encrypts);

        /* decryption */
        byte[] decrpts = encryptor.decrypt(FileUtils.readFileToByteArray(new File("D:/test2.txt")));
        FileUtils.writeByteArrayToFile(new File("D:/test3.txt"), decrpts);
    }

    /* random to generate password */
    private String randomPasswd() {
        String pw = RandomStringUtils.random(PW_GENERATION_LENGTH, PW_GENERATION_STR);
        System.out.println("pw = " + pw);
        return pw;
    }

    public static void main(String[] args) throws Exception {
        EncryptUtil util = new EncryptUtil();
        util.encryptString();
//        util.encryptFile();
    }

}
