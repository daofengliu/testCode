package idv;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.*;
import java.nio.charset.StandardCharsets;
import java.util.concurrent.Executors;
import java.util.function.Consumer;

/**
 * ==== Run a Shell Command in Java ====
 * The first is to use the Runtime class and call its exec method.
 * The second and more customizable way, will be to create and use a ProcessBuilder instance.
 *
 * == Operating System Dependency ==
 * Before we’re going to create a new Process executing our shell command, we need to first determine the operating system on which our JVM is running.
 * That’s because, on Windows, we need to run our command as argument to the cmd.exe shell and on all other operating systems we can issue a standard shell, called sh.
 *
 *     boolean isWindows = System.getProperty("os.name").toLowerCase().startsWith("windows");
 *
 * == Input and Output ==
 * Furthermore we need a way to hook into the input and output streams of our process.
 * At least the output must be consumed – otherwise our process doesn’t return successfully, instead it will hang.
 * =============================================================================
 * _如果不清空 input, output buffer，則 Process 執行 script 一陣子後會 hang 住
 * =============================================================================
 *
 *   == https://bjurr.com/runtime-exec-hangs-a-complete-solution/ ==
 *   If you execute a command using Runtime.exec on Windows and wait for it to complete, like follows, your program may hang on waitFor.
 *
 *     Process p = Runtime.getRuntime().exec("myCommand");
 *     p.waitFor();
 *
 *   The reason for the hanging is the communication between Java and the external operating system process.
 *   And more specifically the communication buffers.
 *   The buffers for STDERR and STDOUT has to be flushed for the program not to hang.
 *
 *   Flushing these buffers are very easy, but! You can not flush them one by one,
 *     you have to do it simultaniously for the program not to hang while flushing!
 *   So you have to start at least one new thread to succeed.
 */
public class ExecScriptDemo {

    private static final Logger LOGGER = LoggerFactory.getLogger(ExecScriptDemo.class);

    public static void main(String[] args) throws IOException {
        new ExecScriptDemo().byProcessBuilder();
    }


    private void byRuntime() throws Exception {
        boolean isWindows = System.getProperty("os.name").toLowerCase().startsWith("windows");

        String homeDir = System.getProperty("user.home");
        Process process = null;
        try {
            if (isWindows) {
                /* == run a command == */
//                process = Runtime.getRuntime().exec("cmd /c dir D:\\tmp");
                /* == run a bat file == */
//                process = Runtime.getRuntime().exec("cmd /c hello.bat", null, new File("D:\\tmp"));
                process = Runtime.getRuntime().exec(
                        String.format("cmd.exe /c dir %s", homeDir));
            } else {
                /* == run a shell command == */
//                process = Runtime.getRuntime().exec("ls /home");
                /* == run a shell script == */
//                process = Runtime.getRuntime().exec("path/to/hello.sh");
                process = Runtime.getRuntime().exec(
                        String.format("sh -c ls %s", homeDir    ));
            }

            /* 清掉 input 的 buffer */
            StreamGobbler streamGobbler = new StreamGobbler(process.getInputStream(), System.out::println);
            Executors.newSingleThreadExecutor().submit(streamGobbler);

            int exitVal = process.waitFor();
            if (exitVal == 0) {
                /* success */
            } else {
                /* abnormal... */
            }
        } catch (Exception ex) {
            LOGGER.error(ex.getMessage(), ex);
            throw ex;
        }
    }

    /**
     * ps. ProcessBuilder 和 Runtime.getRuntime().exec() 差異
     *
     *   Runtime.exec()
     *     _指令和參數合為一個字串 -> "cmd /c dir D:\\tmp"
     *   ProcessBuilder.command()
     *     _指令和參數要分開 -> "cmd.exe", "/c", "dir D:\\tmp"
     */
    private void byProcessBuilder() {
        boolean isWindows = System.getProperty("os.name").toLowerCase().startsWith("windows");

        ProcessBuilder builder = new ProcessBuilder();
        if (isWindows) {
            /* == run a command == */
//            builder.command("cmd.exe", "/c", "dir D:\\tmp");
            /* == run a bat file == */
//            builder.command("D:\\tmp\\hello.bat");
            builder.command("cmd.exe", "/c", "dir");
        } else {
            /* == run a shell command == */
//            builder.command("bash", "-c", "ls /home/daniel/");
            /* == run a shell script == */
//            builder.command("path/to/hello.sh");
            builder.command("sh", "-c", "ls");
        }
        builder.directory(new File(System.getProperty("user.home")));

        try {
            Process process = builder.start();
            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream(), StandardCharsets.UTF_8));

            /* 清掉 input 的 buffer */
            String line = null;
            while ((line = reader.readLine()) != null) {
                System.out.println(line);
            }

            int exitVal = process.waitFor();
            if (exitVal == 0) {
                /* success */
            } else {
                /* abnormal... */
            }
        } catch (Exception ex) {
            LOGGER.error(ex.getMessage(), ex);
        }
    }

    /**
     * 清除 input buffer
     */
    private static class StreamGobbler implements Runnable {
        private InputStream inputStream;
        private Consumer<String> consumer;

        public StreamGobbler(InputStream inputStream, Consumer<String> consumer) {
            this.inputStream = inputStream;
            this.consumer = consumer;
        }

        @Override
        public void run() {
            new BufferedReader(new InputStreamReader(inputStream)).lines().forEach(consumer);
        }
    }

}




java -cp ".:./weblogic_neil.jar:../lib/*" com.faraday.project.sfolder.utils.PinParser
