<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Strict//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>PDFJS - PDF viewer</title>

<!--
http://mozilla.github.io/pdf.js/examples/index.html#interactive-examples

<script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.0.550/pdf.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.0.550/pdf.worker.js"></script>
-->
<script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.2.2/pdf.min.js"></script>
</head>
<body>

<!-- ========== 一次讀取所有頁 ==========
<div id="pdf_container" style="border: 1px solid black; width: 1000px;"></div>

<script type="text/javascript">
pdfjsLib.disableWorker = true
//pdfjsLib.workerSrc = './pdf.worker.min.js'
//pdfjsLib.cMapUrl = './cmaps'
//pdfjsLib.cMapPacked = true
pdfjsLib.disableRange = true
//pdfjsLib.disableStream = true

/* Asynchronous download of PDF */
let pdfURL = 'https://cdn.rawgit.com/mozilla/pdf.js/master/web/compressed.tracemonkey-pldi-09.pdf';
let loadingTask = pdfjsLib.getDocument(pdfURL);
loadingTask.promise.then(function(pdf) {
    // console.log('PDF loaded');

    /* Fetch the first page */
    for (let pageNum = 1; pageNum < pdf.numPages; ++pageNum) {
        pdf.getPage(pageNum).then(function(page) {
            console.log('Page loaded');

            let scale = 1.5;
            let viewport = page.getViewport(scale);

            /* Prepare canvas using PDF page dimensions */
            let canvas = document.createElement('canvas');
            let context = canvas.getContext('2d');
            canvas.height = viewport.height;
            canvas.width = viewport.width;

            /* Render PDF page into canvas context */
            var renderContext = {
                canvasContext: context,
                viewport: viewport
            };
            let renderTask = page.render(renderContext);
            renderTask.then(function() {
                console.log('Page rendered');
                document.getElementById('pdf_container').appendChild(canvas);
            });
       });
   }
}, function (err) {
   console.error(err);
});
</script>
-->


<!-- ========== 分頁 ========== -->
<div>
    <button id="prev">Previous</button>
    <button id="next">Next</button>
    &nbsp;&nbsp;
    <span>Page:
        <span id="page_num"></span> /
        <span id="page_count"></span>
    </span>
    &nbsp;&nbsp;
    <input id="ipt_page" type="text" size="3" />
    <button id="goto">Go To</button>
</div>

<br/>
<div>
    <canvas id="pdf_container" style="border: 1px solid black;"></canvas>
</div>

<script type="text/javascript">
let PDF_JS_LIB = pdfjsLib || {};
PDF_JS_LIB.disableWorker = true;
//PDF_JS_LIB.workerSrc = './pdf.worker.min.js';
//PDF_JS_LIB.cMapUrl = './cmaps';
//PDF_JS_LIB.cMapPacked = true;
PDF_JS_LIB.disableRange = true;
//PDF_JS_LIB.disableStream = true;

let pdfURL = 'https://cdn.rawgit.com/mozilla/pdf.js/master/web/compressed.tracemonkey-pldi-09.pdf';
let pdfDoc = null;
let pageNum = 1;
let pageRendering = false;
let pageNumPending = null;
let scale = 1.5;
let canvas = document.getElementById('pdf_container');
let ctx = canvas.getContext('2d');

let _btnPrev = document.getElementById('prev');
let _btnNext = document.getElementById('next');
let _btnGoto = document.getElementById('goto');
let _spanPageNum = document.getElementById('page_num');
let _spanPageCnt = document.getElementById('page_count');
let _iptPage = document.getElementById('ipt_page');

_btnPrev.addEventListener('click', onPrevPage);
_btnNext.addEventListener('click', onNextPage);
_btnGoto.addEventListener('click', toPage);

/** get page info from document, resize canvas accordingly, and render page. */
function renderPage(pageNum) {
    pageRendering = true;

    /* using promise to fetch the page */
    pdfDoc.getPage(pageNum).then(function(page) {
        var viewport = page.getViewport(scale);
        canvas.height = viewport.height;
        canvas.width = viewport.width;

        /* render PDF page into canvas context */
        var renderContext = {
            canvasContext: ctx,
            viewport: viewport
        };
        var renderTask = page.render(renderContext);

        /* wait for rendering to finish */
        renderTask.promise.then(function() {
            pageRendering = false;
            if (pageNumPending !== null) {
                /* new page rendering is pending */
                renderPage(pageNumPending);
                pageNumPending = null;
            }
        });
    });

    /* update page counters */
    _spanPageNum.textContent = pageNum;
}

/**
 * if another page rendering in progress, waits until the rendering is finished.
 * otherwise, executes rendering immediately.
 */
function queueRenderPage(num) {
    if (pageRendering) {
        pageNumPending = num;
    } else {
        renderPage(num);
    }
}

/** displays previous page. */
function onPrevPage() {
    if (pageNum <= 1) {
        return;
    }
    pageNum--;
    queueRenderPage(pageNum);
}

/** displays next page. */
function onNextPage() {
    if (pageNum >= pdfDoc.numPages) {
        return;
    }
    pageNum++;
    queueRenderPage(pageNum);
}

/** go to page */
function toPage() {
    let num = parseInt(_iptPage.value, 10);
    if (!isInt(num)) {
        alert("Please input integer!");
        _iptPage.value = '';
        return false;
    }
    if (num < 1 || num > pdfDoc.numPages) {
        alert("Invalid page number!");
        _iptPage.value = '';
        return;
    }
    pageNum = num;
    queueRenderPage(pageNum);
}

/** asynchronously downloads PDF. */
PDF_JS_LIB.getDocument(pdfURL).then(function (_pdfDoc) {
    pdfDoc = _pdfDoc;
    _spanPageCnt.textContent = pdfDoc.numPages;
    /* initial/first page rendering */
    renderPage(pageNum);
});

function isInt(value) {
    return !isNaN(value) && parseInt(Number(value)) == value && !isNaN(parseInt(value, 10));
}
</script>

</body>
</html>
